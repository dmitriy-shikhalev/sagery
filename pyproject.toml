[tool.poetry]
name = "sagery"
version = "0.1.0"
description = ""
authors = ["Dmitriy Shikhalev <dmitriy.shikhalev@gmail.com>"]
license = "BSD 3-Clause License"
readme = "README.md"
packages = [{ include = "sagery" }]

[tool.poetry.dependencies]
python = "^3.12"
sqlalchemy = "^2.0.29"
alembic = "^1.13.1"
pydantic = "^2.9.1"
pydantic-settings = "^2.4.0"
fastapi = "^0.114.0"
uvicorn = "^0.30.6"
psycopg2 = "^2.9.9"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
poetry = "^1.8.2"
mypy = "^1.9.0"
pytest-coverage = "^0.0"
pytest-mypy = "^0.10.3"
httpx = "^0.27.0"
pytest-isort = "^4.0.0"
pytest-asyncio = "^0.24.0"
pyenchant = "^3.2.2"
black = "^24.10.0"
ruff = "^0.6.9"
pre-commit = "^4.0.1"
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
sagery = "sagery.main:main"

[tool.black]
skip-string-normalization = true
line-length = 120

[tool.ruff]
# Same as Black.
line-length = 120

exclude = ["jupyter_notebook_config.py"]
select = [
    "E",  # pycodestyle errors (settings from FastAPI, thanks, @tiangolo!)
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
]

[tool.ruff.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []
